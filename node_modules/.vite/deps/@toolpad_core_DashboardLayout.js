import {
  Close_default,
  DarkMode_default,
  ExpandLess_default,
  ExpandMore_default,
  LightMode_default,
  MenuOpen_default
} from "./chunk-WMIHV3OK.js";
import {
  MoreVert_default
} from "./chunk-IXSTG4XE.js";
import {
  Logout_default
} from "./chunk-FNK4223W.js";
import {
  Menu_default
} from "./chunk-6MLWVOTB.js";
import {
  require_browser
} from "./chunk-NLN4UES3.js";
import {
  Collapse_default,
  Popover_default,
  SnackbarContent_default,
  Snackbar_default,
  Stack_default,
  useMediaQuery_default
} from "./chunk-TOVCWCGQ.js";
import {
  Toolbar_default
} from "./chunk-NGMPCLTM.js";
import {
  ListItemIcon_default
} from "./chunk-S7BBCPHZ.js";
import {
  ListItem_default
} from "./chunk-EFET4HD2.js";
import {
  ListItemButton_default
} from "./chunk-I5BLDIZE.js";
import {
  ListItemText_default
} from "./chunk-XAAM6K7A.js";
import {
  AppBar_default
} from "./chunk-CCIMJZ6F.js";
import {
  Box_default
} from "./chunk-2245MI5W.js";
import {
  Drawer_default
} from "./chunk-KA6SGKYK.js";
import {
  Divider_default
} from "./chunk-PNM3WHEM.js";
import {
  List_default
} from "./chunk-KUWRK5BZ.js";
import "./chunk-HVOV52BS.js";
import {
  Badge_default
} from "./chunk-UQ4KUNPG.js";
import {
  Alert_default,
  Avatar_default,
  Button_default,
  ListSubheader_default,
  Tooltip_default
} from "./chunk-2NKD3LII.js";
import {
  IconButton_default
} from "./chunk-Y6YMYT7G.js";
import "./chunk-3HPN5KNE.js";
import "./chunk-PCWVGVVV.js";
import {
  Typography_default
} from "./chunk-I75HSSMB.js";
import "./chunk-7FNC75A6.js";
import "./chunk-RE4YEFFO.js";
import "./chunk-MGWQ236T.js";
import "./chunk-DUSBVXHJ.js";
import "./chunk-AACZXOME.js";
import {
  CssBaseline_default
} from "./chunk-XLFX3HK4.js";
import {
  InitColorSchemeScript_default,
  ThemeProvider,
  useColorScheme
} from "./chunk-SAFGZVLM.js";
import "./chunk-OX56QJAV.js";
import "./chunk-C6WWHQR7.js";
import "./chunk-QQ5BJFDY.js";
import "./chunk-QD43XWW3.js";
import "./chunk-A6IYWQYU.js";
import "./chunk-K6OH3WLD.js";
import "./chunk-Y7L6ZPMK.js";
import "./chunk-DPDULPBW.js";
import {
  createTheme,
  require_react_is,
  styled_default,
  useTheme
} from "./chunk-LDNVK4LG.js";
import {
  clsx_default
} from "./chunk-VEB3A3D5.js";
import "./chunk-G7VAXR7S.js";
import {
  require_prop_types
} from "./chunk-533K5AAC.js";
import {
  require_jsx_runtime
} from "./chunk-5AS4NL4J.js";
import {
  require_react
} from "./chunk-RUPNRBO7.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@toolpad/core/DashboardLayout/DashboardLayout.js
var React31 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());

// node_modules/@toolpad/core/shared/context.js
var React = __toESM(require_react());
var BrandingContext = React.createContext(null);
var NavigationContext = React.createContext([]);
var PaletteModeContext = React.createContext({
  paletteMode: "light",
  setPaletteMode: () => {
  },
  isDualTheme: false
});
var RouterContext = React.createContext(null);
var WindowContext = React.createContext(void 0);
var CrudContext = React.createContext({
  dataSource: null,
  dataSourceCache: null
});

// node_modules/@toolpad/core/Account/Account.js
var React22 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());

// node_modules/@toolpad/core/Account/SignInButton.js
var React17 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@toolpad/core/AppProvider/AppProvider.js
var React15 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/@toolpad/core/useNotifications/useNotifications.js
var React3 = __toESM(require_react());

// node_modules/@toolpad/core/useNotifications/NotificationsContext.js
var React2 = __toESM(require_react());
var NotificationsContext = React2.createContext(null);

// node_modules/@toolpad/core/useNotifications/NotificationsProvider.js
var React7 = __toESM(require_react());

// node_modules/@toolpad/utils/esm/react.js
var React4 = __toESM(require_react());
var ReactIs = __toESM(require_react_is());
var import_jsx_runtime = __toESM(require_jsx_runtime());
function useNonNullableContext(context, name) {
  const maybeContext = React4.useContext(context);
  if (maybeContext === null || maybeContext === void 0) {
    throw new Error(`context "${name}" was used without a Provider`);
  }
  return maybeContext;
}

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/useForkRef/useForkRef.js
var React5 = __toESM(require_react(), 1);

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/setRef/setRef.js
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/useForkRef/useForkRef.js
function useForkRef(...refs) {
  return React5.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (instance) => {
      refs.forEach((ref) => {
        setRef(ref, instance);
      });
    };
  }, refs);
}

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js
function isHostComponent(element) {
  return typeof element === "string";
}
var isHostComponent_default = isHostComponent;

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js
function appendOwnerState(elementType, otherProps, ownerState) {
  if (elementType === void 0 || isHostComponent_default(elementType)) {
    return otherProps;
  }
  return {
    ...otherProps,
    ownerState: {
      ...otherProps.ownerState,
      ...ownerState
    }
  };
}
var appendOwnerState_default = appendOwnerState;

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js
function extractEventHandlers(object, excludeKeys = []) {
  if (object === void 0) {
    return {};
  }
  const result = {};
  Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
    result[prop] = object[prop];
  });
  return result;
}
var extractEventHandlers_default = extractEventHandlers;

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/omitEventHandlers/omitEventHandlers.js
function omitEventHandlers(object) {
  if (object === void 0) {
    return {};
  }
  const result = {};
  Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
    result[prop] = object[prop];
  });
  return result;
}
var omitEventHandlers_default = omitEventHandlers;

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js
function mergeSlotProps(parameters) {
  const {
    getSlotProps,
    additionalProps,
    externalSlotProps,
    externalForwardedProps,
    className
  } = parameters;
  if (!getSlotProps) {
    const joinedClasses2 = clsx_default(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle2 = {
      ...additionalProps == null ? void 0 : additionalProps.style,
      ...externalForwardedProps == null ? void 0 : externalForwardedProps.style,
      ...externalSlotProps == null ? void 0 : externalSlotProps.style
    };
    const props2 = {
      ...additionalProps,
      ...externalForwardedProps,
      ...externalSlotProps
    };
    if (joinedClasses2.length > 0) {
      props2.className = joinedClasses2;
    }
    if (Object.keys(mergedStyle2).length > 0) {
      props2.style = mergedStyle2;
    }
    return {
      props: props2,
      internalRef: void 0
    };
  }
  const eventHandlers = extractEventHandlers_default({
    ...externalForwardedProps,
    ...externalSlotProps
  });
  const componentsPropsWithoutEventHandlers = omitEventHandlers_default(externalSlotProps);
  const otherPropsWithoutEventHandlers = omitEventHandlers_default(externalForwardedProps);
  const internalSlotProps = getSlotProps(eventHandlers);
  const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
  const mergedStyle = {
    ...internalSlotProps == null ? void 0 : internalSlotProps.style,
    ...additionalProps == null ? void 0 : additionalProps.style,
    ...externalForwardedProps == null ? void 0 : externalForwardedProps.style,
    ...externalSlotProps == null ? void 0 : externalSlotProps.style
  };
  const props = {
    ...internalSlotProps,
    ...additionalProps,
    ...otherPropsWithoutEventHandlers,
    ...componentsPropsWithoutEventHandlers
  };
  if (joinedClasses.length > 0) {
    props.className = joinedClasses;
  }
  if (Object.keys(mergedStyle).length > 0) {
    props.style = mergedStyle;
  }
  return {
    props,
    internalRef: internalSlotProps.ref
  };
}
var mergeSlotProps_default = mergeSlotProps;

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js
function resolveComponentProps(componentProps, ownerState, slotState) {
  if (typeof componentProps === "function") {
    return componentProps(ownerState, slotState);
  }
  return componentProps;
}
var resolveComponentProps_default = resolveComponentProps;

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js
function useSlotProps(parameters) {
  var _a;
  const {
    elementType,
    externalSlotProps,
    ownerState,
    skipResolvingSlotProps = false,
    ...other
  } = parameters;
  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps_default(externalSlotProps, ownerState);
  const {
    props: mergedProps,
    internalRef
  } = mergeSlotProps_default({
    ...other,
    externalSlotProps: resolvedComponentsProps
  });
  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_a = parameters.additionalProps) == null ? void 0 : _a.ref);
  const props = appendOwnerState_default(elementType, {
    ...mergedProps,
    ref
  }, ownerState);
  return props;
}
var useSlotProps_default = useSlotProps;

// node_modules/@toolpad/core/AppProvider/LocalizationProvider.js
var React6 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@toolpad/core/locales/getLocalization.js
var getLocalization = (translations) => {
  return {
    components: {
      MuiLocalizationProvider: {
        defaultProps: {
          localeText: {
            ...translations
          }
        }
      }
    }
  };
};

// node_modules/@toolpad/core/locales/en.js
var en = {
  // Account
  accountSignInLabel: "Sign In",
  accountSignOutLabel: "Sign Out",
  // AccountPreview
  accountPreviewTitle: "Account",
  accountPreviewIconButtonLabel: "Current User",
  // SignInPage
  signInTitle: "Sign In",
  signInSubtitle: "Welcome user, please sign in to continue",
  signInRememberMe: "Remember Me",
  oauthSignInTitle: "Sign in with OAuth",
  passkeySignInTitle: "Sign in with Passkey",
  magicLinkSignInTitle: "Sign in with Magic Link",
  // Common authentication labels
  email: "Email",
  password: "Password",
  username: "Username",
  passkey: "Passkey",
  // Common action labels
  save: "Save",
  cancel: "Cancel",
  ok: "Ok",
  or: "Or",
  to: "To",
  with: "With",
  close: "Close",
  delete: "Delete",
  alert: "Alert",
  confirm: "Confirm",
  loading: "Loading...",
  // CRUD
  createNewButtonLabel: "Create new",
  reloadButtonLabel: "Reload data",
  createLabel: "Create",
  createSuccessMessage: "Item created successfully.",
  createErrorMessage: "Failed to create item. Reason:",
  editLabel: "Edit",
  editSuccessMessage: "Item edited successfully.",
  editErrorMessage: "Failed to edit item. Reason:",
  deleteLabel: "Delete",
  deleteConfirmTitle: "Delete item?",
  deleteConfirmMessage: "Do you wish to delete this item?",
  deleteConfirmLabel: "Delete",
  deleteCancelLabel: "Cancel",
  deleteSuccessMessage: "Item deleted successfully.",
  deleteErrorMessage: "Failed to delete item. Reason:",
  deletedItemMessage: "This item has been deleted."
};
var en_default = getLocalization(en);

// node_modules/@toolpad/core/AppProvider/LocalizationProvider.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var LocalizationContext = React6.createContext({});
var LocalizationProvider = function LocalizationProvider2(props) {
  var _a, _b, _c;
  const {
    localeText: propsLocaleText,
    children
  } = props;
  const theme = useTheme();
  const themeLocaleText = (_c = (_b = (_a = theme == null ? void 0 : theme.components) == null ? void 0 : _a.MuiLocalizationProvider) == null ? void 0 : _b.defaultProps) == null ? void 0 : _c.localeText;
  const defaultLocaleText2 = en_default.components.MuiLocalizationProvider.defaultProps.localeText;
  const localeText = React6.useMemo(() => ({
    ...defaultLocaleText2,
    ...themeLocaleText,
    ...propsLocaleText
  }), [defaultLocaleText2, themeLocaleText, propsLocaleText]);
  return (0, import_jsx_runtime2.jsx)(LocalizationContext.Provider, {
    value: localeText,
    children
  });
};
true ? LocalizationProvider.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * Locale for components texts
   */
  localeText: import_prop_types.default.object
} : void 0;
function useLocaleText() {
  return React6.useContext(LocalizationContext);
}

// node_modules/@toolpad/core/useNotifications/NotificationsProvider.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var _CloseIcon;
var RootPropsContext = React7.createContext(null);
var defaultLocaleText = {
  close: "Close"
};
function Notification({
  notificationKey,
  open,
  message,
  options,
  badge
}) {
  var _a, _b;
  const globalLocaleText = useLocaleText();
  const localeText = {
    ...defaultLocaleText,
    ...globalLocaleText
  };
  const {
    close
  } = useNonNullableContext(NotificationsContext);
  const {
    severity,
    actionText,
    onAction,
    autoHideDuration
  } = options;
  const handleClose = React7.useCallback((event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    close(notificationKey);
  }, [notificationKey, close]);
  const action = (0, import_jsx_runtime3.jsxs)(React7.Fragment, {
    children: [onAction ? (0, import_jsx_runtime3.jsx)(Button_default, {
      color: "inherit",
      size: "small",
      onClick: onAction,
      children: actionText ?? "Action"
    }) : null, (0, import_jsx_runtime3.jsx)(IconButton_default, {
      size: "small",
      "aria-label": localeText == null ? void 0 : localeText.close,
      title: localeText == null ? void 0 : localeText.close,
      color: "inherit",
      onClick: handleClose,
      children: _CloseIcon || (_CloseIcon = (0, import_jsx_runtime3.jsx)(Close_default, {
        fontSize: "small"
      }))
    })]
  });
  const props = React7.useContext(RootPropsContext);
  const SnackbarComponent = ((_a = props == null ? void 0 : props.slots) == null ? void 0 : _a.snackbar) ?? Snackbar_default;
  const snackbarSlotProps = useSlotProps_default({
    elementType: SnackbarComponent,
    ownerState: props,
    externalSlotProps: (_b = props == null ? void 0 : props.slotProps) == null ? void 0 : _b.snackbar,
    additionalProps: {
      open,
      autoHideDuration,
      onClose: handleClose,
      action
    }
  });
  return (0, import_jsx_runtime3.jsx)(SnackbarComponent, {
    ...snackbarSlotProps,
    children: (0, import_jsx_runtime3.jsx)(Badge_default, {
      badgeContent: badge,
      color: "primary",
      sx: {
        width: "100%"
      },
      children: severity ? (0, import_jsx_runtime3.jsx)(Alert_default, {
        severity,
        sx: {
          width: "100%"
        },
        action,
        children: message
      }) : (0, import_jsx_runtime3.jsx)(SnackbarContent_default, {
        message,
        action
      })
    })
  }, notificationKey);
}
function Notifications({
  state
}) {
  const currentNotification = state.queue[0] ?? null;
  return currentNotification ? (0, import_jsx_runtime3.jsx)(Notification, {
    ...currentNotification,
    badge: state.queue.length > 1 ? String(state.queue.length) : null
  }) : null;
}
var nextId = 0;
var generateId = () => {
  const id = nextId;
  nextId += 1;
  return id;
};
function NotificationsProvider(props) {
  const {
    children
  } = props;
  const [state, setState] = React7.useState({
    queue: []
  });
  const show = React7.useCallback((message, options = {}) => {
    const notificationKey = options.key ?? `::toolpad-internal::notification::${generateId()}`;
    setState((prev) => {
      if (prev.queue.some((n) => n.notificationKey === notificationKey)) {
        return prev;
      }
      return {
        ...prev,
        queue: [...prev.queue, {
          message,
          options,
          notificationKey,
          open: true
        }]
      };
    });
    return notificationKey;
  }, []);
  const close = React7.useCallback((key) => {
    setState((prev) => ({
      ...prev,
      queue: prev.queue.filter((n) => n.notificationKey !== key)
    }));
  }, []);
  const contextValue = React7.useMemo(() => ({
    show,
    close
  }), [show, close]);
  return (0, import_jsx_runtime3.jsx)(RootPropsContext.Provider, {
    value: props,
    children: (0, import_jsx_runtime3.jsxs)(NotificationsContext.Provider, {
      value: contextValue,
      children: [children, (0, import_jsx_runtime3.jsx)(Notifications, {
        state
      })]
    })
  });
}

// node_modules/@toolpad/core/useDialogs/useDialogs.js
var import_invariant = __toESM(require_browser());
var React9 = __toESM(require_react());

// node_modules/@toolpad/core/useDialogs/DialogsContext.js
var React8 = __toESM(require_react());
var DialogsContext = React8.createContext(null);

// node_modules/@toolpad/core/useDialogs/useDialogs.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());

// node_modules/@toolpad/core/useDialogs/DialogsProvider.js
var import_invariant2 = __toESM(require_browser());
var React12 = __toESM(require_react());

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
var React11 = __toESM(require_react(), 1);

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js
var React10 = __toESM(require_react(), 1);
var useEnhancedEffect = typeof window !== "undefined" ? React10.useLayoutEffect : React10.useEffect;
var useEnhancedEffect_default = useEnhancedEffect;

// node_modules/@toolpad/core/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
function useEventCallback(fn) {
  const ref = React11.useRef(fn);
  useEnhancedEffect_default(() => {
    ref.current = fn;
  });
  return React11.useRef((...args) => (
    // @ts-expect-error hide `this`
    (0, ref.current)(...args)
  )).current;
}
var useEventCallback_default = useEventCallback;

// node_modules/@toolpad/core/useDialogs/DialogsProvider.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
function DialogsProvider(props) {
  const {
    children,
    unmountAfter = 1e3
  } = props;
  const [stack, setStack] = React12.useState([]);
  const keyPrefix = React12.useId();
  const nextId2 = React12.useRef(0);
  const requestDialog = useEventCallback_default(function open(Component, payload, options = {}) {
    const {
      onClose = async () => {
      }
    } = options;
    let resolve;
    const promise = new Promise((resolveImpl) => {
      resolve = resolveImpl;
    });
    (0, import_invariant2.default)(resolve, "resolve not set");
    const key = `${keyPrefix}-${nextId2.current}`;
    nextId2.current += 1;
    const newEntry = {
      key,
      open: true,
      promise,
      Component,
      payload,
      onClose,
      resolve
    };
    setStack((prevStack) => [...prevStack, newEntry]);
    return promise;
  });
  const closeDialogUi = useEventCallback_default(function closeDialogUi2(dialog) {
    setStack((prevStack) => prevStack.map((entry) => entry.promise === dialog ? {
      ...entry,
      open: false
    } : entry));
    setTimeout(() => {
      setStack((prevStack) => prevStack.filter((entry) => entry.promise !== dialog));
    }, unmountAfter);
  });
  const closeDialog = useEventCallback_default(async function closeDialog2(dialog, result) {
    const entryToClose = stack.find((entry) => entry.promise === dialog);
    (0, import_invariant2.default)(entryToClose, "dialog not found");
    await entryToClose.onClose(result);
    entryToClose.resolve(result);
    closeDialogUi(dialog);
    return dialog;
  });
  const contextValue = React12.useMemo(() => ({
    open: requestDialog,
    close: closeDialog
  }), [requestDialog, closeDialog]);
  return (0, import_jsx_runtime5.jsxs)(DialogsContext.Provider, {
    value: contextValue,
    children: [children, stack.map(({
      key,
      open,
      Component,
      payload,
      promise
    }) => (0, import_jsx_runtime5.jsx)(Component, {
      payload,
      open,
      onClose: async (result) => {
        await closeDialog(promise, result);
      }
    }, key))]
  });
}

// node_modules/@toolpad/core/AppProvider/AppThemeProvider.js
var React14 = __toESM(require_react());
var import_invariant3 = __toESM(require_browser());

// node_modules/@toolpad/core/persistence/useStorageState.js
var React13 = __toESM(require_react());

// node_modules/@toolpad/core/persistence/codec.js
var CODEC_STRING = {
  parse: (value) => value,
  stringify: (value) => value
};

// node_modules/@toolpad/core/persistence/useStorageState.js
var currentTabChangeListeners = /* @__PURE__ */ new Map();
function onCurrentTabStorageChange(key, handler) {
  let listeners = currentTabChangeListeners.get(key);
  if (!listeners) {
    listeners = /* @__PURE__ */ new Set();
    currentTabChangeListeners.set(key, listeners);
  }
  listeners.add(handler);
}
function offCurrentTabStorageChange(key, handler) {
  const listeners = currentTabChangeListeners.get(key);
  if (!listeners) {
    return;
  }
  listeners.delete(handler);
  if (listeners.size === 0) {
    currentTabChangeListeners.delete(key);
  }
}
function emitCurrentTabStorageChange(key) {
  const listeners = currentTabChangeListeners.get(key);
  if (listeners) {
    listeners.forEach((listener) => listener());
  }
}
if (typeof window !== "undefined") {
  const origSetItem = window.localStorage.setItem;
  window.localStorage.setItem = function setItem(key, value) {
    const result = origSetItem.call(this, key, value);
    emitCurrentTabStorageChange(key);
    return result;
  };
}
function subscribe(area, key, callback) {
  if (!key) {
    return () => {
    };
  }
  const storageHandler = (event) => {
    if (event.storageArea === area && event.key === key) {
      callback();
    }
  };
  window.addEventListener("storage", storageHandler);
  onCurrentTabStorageChange(key, callback);
  return () => {
    window.removeEventListener("storage", storageHandler);
    offCurrentTabStorageChange(key, callback);
  };
}
function getSnapshot(area, key) {
  if (!key) {
    return null;
  }
  try {
    return area.getItem(key);
  } catch {
    return null;
  }
}
function setValue(area, key, value) {
  if (!key) {
    return;
  }
  try {
    if (value === null) {
      area.removeItem(key);
    } else {
      area.setItem(key, String(value));
    }
  } catch {
    return;
  }
  emitCurrentTabStorageChange(key);
}
var serverValue = [null, () => {
}];
function useStorageStateServer() {
  return serverValue;
}
function encode(codec, value) {
  return value === null ? null : codec.stringify(value);
}
function decode(codec, value) {
  return value === null ? null : codec.parse(value);
}
var getKeyServerSnapshot = () => null;
function useStorageState(area, key, initializer = null, options) {
  const codec = (options == null ? void 0 : options.codec) ?? CODEC_STRING;
  const [initialValue] = React13.useState(initializer);
  const encodedInitialValue = React13.useMemo(() => encode(codec, initialValue), [codec, initialValue]);
  const subscribeKey = React13.useCallback((callback) => subscribe(area, key, callback), [area, key]);
  const getKeySnapshot = React13.useCallback(() => getSnapshot(area, key) ?? encodedInitialValue, [area, encodedInitialValue, key]);
  const encodedStoredValue = React13.useSyncExternalStore(subscribeKey, getKeySnapshot, getKeyServerSnapshot);
  const storedValue = React13.useMemo(() => decode(codec, encodedStoredValue), [codec, encodedStoredValue]);
  const setStoredValue = React13.useCallback((value) => {
    const valueToStore = value instanceof Function ? value(storedValue) : value;
    const encodedValueToStore = encode(codec, valueToStore);
    setValue(area, key, encodedValueToStore);
  }, [area, codec, storedValue, key]);
  const [nonStoredValue, setNonStoredValue] = React13.useState(initialValue);
  if (!key) {
    return [nonStoredValue, setNonStoredValue];
  }
  return [storedValue, setStoredValue];
}

// node_modules/@toolpad/core/useLocalStorageState/useLocalStorageState.js
var useLocalStorageStateBrowser = (...args) => useStorageState(window.localStorage, ...args);
var useLocalStorageState = typeof window === "undefined" ? useStorageStateServer : useLocalStorageStateBrowser;

// node_modules/@toolpad/core/AppProvider/AppThemeProvider.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _CssBaseline;
var _InitColorSchemeScrip;
var _CssBaseline2;
var COLOR_SCHEME_ATTRIBUTE = "data-toolpad-color-scheme";
var COLOR_SCHEME_STORAGE_KEY = "toolpad-color-scheme";
var MODE_STORAGE_KEY = "toolpad-mode";
function usePreferredMode(window2) {
  const prefersDarkMode = useMediaQuery_default("(prefers-color-scheme: dark)", window2 && {
    matchMedia: window2.matchMedia
  });
  return prefersDarkMode ? "dark" : "light";
}
function isCssVarsTheme(theme) {
  return "vars" in theme;
}
function LegacyThemeProvider(props) {
  const {
    children,
    theme,
    window: appWindow
  } = props;
  (0, import_invariant3.default)(!isCssVarsTheme(theme), "This provider only accepts legacy themes.");
  const isDualTheme = "light" in theme || "dark" in theme;
  const preferredMode = usePreferredMode(appWindow);
  const [userMode, setUserMode] = useLocalStorageState(MODE_STORAGE_KEY, "system");
  const paletteMode = !userMode || userMode === "system" ? preferredMode : userMode;
  const dualAwareTheme = React14.useMemo(() => isDualTheme ? theme[paletteMode === "dark" ? "dark" : "light"] ?? theme[paletteMode === "dark" ? "light" : "dark"] : theme, [isDualTheme, paletteMode, theme]);
  const paletteModeContextValue = React14.useMemo(() => ({
    paletteMode,
    setPaletteMode: setUserMode,
    isDualTheme
  }), [isDualTheme, paletteMode, setUserMode]);
  return (0, import_jsx_runtime6.jsx)(ThemeProvider, {
    theme: dualAwareTheme,
    children: (0, import_jsx_runtime6.jsxs)(PaletteModeContext.Provider, {
      value: paletteModeContextValue,
      children: [_CssBaseline || (_CssBaseline = (0, import_jsx_runtime6.jsx)(CssBaseline_default, {
        enableColorScheme: true
      })), children]
    })
  });
}
function CssVarsPaletteModeProvider(props) {
  const {
    children,
    window: appWindow
  } = props;
  const preferredMode = usePreferredMode(appWindow);
  const {
    mode,
    setMode,
    allColorSchemes
  } = useColorScheme();
  const paletteModeContextValue = React14.useMemo(() => {
    return {
      paletteMode: !mode || mode === "system" ? preferredMode : mode,
      setPaletteMode: setMode,
      isDualTheme: allColorSchemes.length > 1
    };
  }, [allColorSchemes, mode, preferredMode, setMode]);
  return (0, import_jsx_runtime6.jsx)(PaletteModeContext.Provider, {
    value: paletteModeContextValue,
    children
  });
}
function CssVarsThemeProvider(props) {
  const {
    children,
    theme,
    window: appWindow
  } = props;
  (0, import_invariant3.default)(isCssVarsTheme(theme), "This provider only accepts CSS vars themes.");
  return (0, import_jsx_runtime6.jsxs)(ThemeProvider, {
    theme,
    documentNode: appWindow == null ? void 0 : appWindow.document,
    colorSchemeNode: appWindow == null ? void 0 : appWindow.document.documentElement,
    disableNestedContext: true,
    colorSchemeStorageKey: COLOR_SCHEME_STORAGE_KEY,
    modeStorageKey: MODE_STORAGE_KEY,
    children: [_InitColorSchemeScrip || (_InitColorSchemeScrip = (0, import_jsx_runtime6.jsx)(InitColorSchemeScript_default, {
      attribute: COLOR_SCHEME_ATTRIBUTE,
      colorSchemeStorageKey: COLOR_SCHEME_STORAGE_KEY,
      modeStorageKey: MODE_STORAGE_KEY
    })), (0, import_jsx_runtime6.jsxs)(CssVarsPaletteModeProvider, {
      window: appWindow,
      children: [_CssBaseline2 || (_CssBaseline2 = (0, import_jsx_runtime6.jsx)(CssBaseline_default, {
        enableColorScheme: true
      })), children]
    })]
  });
}
function AppThemeProvider(props) {
  const {
    children,
    theme,
    ...rest
  } = props;
  const useCssVarsProvider = isCssVarsTheme(theme);
  return useCssVarsProvider ? (0, import_jsx_runtime6.jsx)(CssVarsThemeProvider, {
    theme,
    ...rest,
    children
  }) : (0, import_jsx_runtime6.jsx)(LegacyThemeProvider, {
    theme,
    ...rest,
    children
  });
}

// node_modules/@toolpad/core/AppProvider/AppProvider.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var AuthenticationContext = React15.createContext(null);
var SessionContext = React15.createContext(null);
function createTheme2() {
  return createTheme({
    cssVariables: {
      colorSchemeSelector: "data-toolpad-color-scheme"
    },
    colorSchemes: {
      dark: true
    }
  });
}
function AppProvider(props) {
  const {
    children,
    theme = createTheme2(),
    branding = null,
    navigation = [],
    localeText,
    router = null,
    authentication = null,
    session = null,
    window: appWindow
  } = props;
  return (0, import_jsx_runtime7.jsx)(WindowContext.Provider, {
    value: appWindow,
    children: (0, import_jsx_runtime7.jsx)(AuthenticationContext.Provider, {
      value: authentication,
      children: (0, import_jsx_runtime7.jsx)(SessionContext.Provider, {
        value: session,
        children: (0, import_jsx_runtime7.jsx)(RouterContext.Provider, {
          value: router,
          children: (0, import_jsx_runtime7.jsx)(AppThemeProvider, {
            theme,
            window: appWindow,
            children: (0, import_jsx_runtime7.jsx)(LocalizationProvider, {
              localeText,
              children: (0, import_jsx_runtime7.jsx)(NotificationsProvider, {
                children: (0, import_jsx_runtime7.jsx)(DialogsProvider, {
                  children: (0, import_jsx_runtime7.jsx)(BrandingContext.Provider, {
                    value: branding,
                    children: (0, import_jsx_runtime7.jsx)(NavigationContext.Provider, {
                      value: navigation,
                      children
                    })
                  })
                })
              })
            })
          })
        })
      })
    })
  });
}
true ? AppProvider.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Authentication methods.
   * @default null
   */
  authentication: import_prop_types2.default.shape({
    signIn: import_prop_types2.default.func.isRequired,
    signOut: import_prop_types2.default.func.isRequired
  }),
  /**
   * Branding options for the app.
   * @default null
   */
  branding: import_prop_types2.default.shape({
    homeUrl: import_prop_types2.default.string,
    logo: import_prop_types2.default.node,
    title: import_prop_types2.default.string
  }),
  /**
   * The content of the app provider.
   */
  children: import_prop_types2.default.node,
  /**
   * Locale text for components
   */
  localeText: import_prop_types2.default.object,
  /**
   * Navigation definition for the app. [Find out more](https://mui.com/toolpad/core/react-app-provider/#navigation).
   * @default []
   */
  navigation: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.shape({
    action: import_prop_types2.default.node,
    children: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.object, import_prop_types2.default.shape({
      kind: import_prop_types2.default.oneOf(["header"]).isRequired,
      title: import_prop_types2.default.string.isRequired
    }), import_prop_types2.default.shape({
      kind: import_prop_types2.default.oneOf(["divider"]).isRequired
    })]).isRequired),
    icon: import_prop_types2.default.node,
    kind: import_prop_types2.default.oneOf(["page"]),
    pattern: import_prop_types2.default.string,
    segment: import_prop_types2.default.string,
    title: import_prop_types2.default.string
  }), import_prop_types2.default.shape({
    kind: import_prop_types2.default.oneOf(["header"]).isRequired,
    title: import_prop_types2.default.string.isRequired
  }), import_prop_types2.default.shape({
    kind: import_prop_types2.default.oneOf(["divider"]).isRequired
  })]).isRequired),
  /**
   * Router implementation used inside Toolpad components.
   * @default null
   */
  router: import_prop_types2.default.shape({
    Link: import_prop_types2.default.func,
    navigate: import_prop_types2.default.func.isRequired,
    pathname: import_prop_types2.default.string.isRequired,
    searchParams: import_prop_types2.default.instanceOf(URLSearchParams).isRequired
  }),
  /**
   * Session info about the current user.
   * @default null
   */
  session: import_prop_types2.default.shape({
    user: import_prop_types2.default.shape({
      email: import_prop_types2.default.string,
      id: import_prop_types2.default.string,
      image: import_prop_types2.default.string,
      name: import_prop_types2.default.string
    })
  }),
  /**
   * [Theme or themes](https://mui.com/toolpad/core/react-app-provider/#theming) to be used by the app in light/dark mode. A [CSS variables theme](https://mui.com/material-ui/customization/css-theme-variables/overview/) is recommended.
   * @default createTheme()
   */
  theme: import_prop_types2.default.object,
  /**
   * The window where the application is rendered.
   * This is needed when rendering the app inside an iframe, for example.
   * @default window
   */
  window: import_prop_types2.default.object
} : void 0;

// node_modules/@toolpad/core/Account/AccountLocaleContext.js
var React16 = __toESM(require_react());
var AccountLocaleContext = React16.createContext(null);

// node_modules/@toolpad/core/Account/SignInButton.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
function SignInButton(props) {
  const authentication = React17.useContext(AuthenticationContext);
  const globalLocaleText = useLocaleText();
  const accountLocaleText = React17.useContext(AccountLocaleContext);
  const localeText = {
    ...globalLocaleText,
    ...accountLocaleText
  };
  return (0, import_jsx_runtime8.jsx)(Button_default, {
    disableElevation: true,
    variant: "contained",
    size: "small",
    onClick: authentication == null ? void 0 : authentication.signIn,
    sx: {
      textTransform: "capitalize",
      filter: "opacity(0.9)",
      width: "50%",
      margin: (theme) => `${theme.spacing(1)} auto`,
      transition: "filter 0.2s ease-in",
      "&:hover": {
        filter: "opacity(1)"
      }
    },
    ...props,
    children: localeText == null ? void 0 : localeText.accountSignInLabel
  });
}
true ? SignInButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types3.default.node
} : void 0;

// node_modules/@toolpad/core/Account/SignOutButton.js
var React18 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var _LogoutIcon;
function SignOutButton(props) {
  const authentication = React18.useContext(AuthenticationContext);
  const globalLocaleText = useLocaleText();
  const accountLocaleText = React18.useContext(AccountLocaleContext);
  const localeText = {
    ...globalLocaleText,
    ...accountLocaleText
  };
  return (0, import_jsx_runtime9.jsx)(Button_default, {
    disabled: !authentication,
    variant: "outlined",
    size: "small",
    disableElevation: true,
    onClick: authentication == null ? void 0 : authentication.signOut,
    sx: {
      textTransform: "capitalize",
      fontWeight: "normal",
      filter: "opacity(0.9)",
      transition: "filter 0.2s ease-in",
      "&:hover": {
        filter: "opacity(1)"
      }
    },
    startIcon: _LogoutIcon || (_LogoutIcon = (0, import_jsx_runtime9.jsx)(Logout_default, {})),
    ...props,
    children: localeText == null ? void 0 : localeText.accountSignOutLabel
  });
}
true ? SignOutButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types4.default.node
} : void 0;

// node_modules/@toolpad/core/Account/AccountPreview.js
var React19 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var _MoreVertIcon;
function AccountPreview(props) {
  var _a, _b, _c, _d, _e, _f, _g4;
  const {
    slots,
    variant = "condensed",
    slotProps,
    open,
    handleClick,
    sx
  } = props;
  const session = React19.useContext(SessionContext);
  const globalLocaleText = useLocaleText();
  const accountLocaleText = React19.useContext(AccountLocaleContext);
  const localeText = {
    ...globalLocaleText,
    ...accountLocaleText
  };
  if (!session || !session.user) {
    return null;
  }
  const avatarContent = (slots == null ? void 0 : slots.avatar) ? (0, import_jsx_runtime10.jsx)(slots.avatar, {}) : (0, import_jsx_runtime10.jsx)(Avatar_default, {
    src: ((_a = session.user) == null ? void 0 : _a.image) || "",
    alt: ((_b = session.user) == null ? void 0 : _b.name) || ((_c = session.user) == null ? void 0 : _c.email) || "",
    sx: {
      height: variant === "expanded" ? 48 : 32,
      width: variant === "expanded" ? 48 : 32
    },
    ...slotProps == null ? void 0 : slotProps.avatar
  });
  if (variant === "expanded") {
    return (0, import_jsx_runtime10.jsxs)(Stack_default, {
      direction: "row",
      justifyContent: "space-between",
      sx: {
        py: 1,
        px: 2,
        gap: 2,
        ...sx
      },
      children: [(0, import_jsx_runtime10.jsxs)(Stack_default, {
        direction: "row",
        justifyContent: "flex-start",
        spacing: 2,
        overflow: "hidden",
        children: [avatarContent, (0, import_jsx_runtime10.jsxs)(Stack_default, {
          direction: "column",
          justifyContent: "space-evenly",
          overflow: "hidden",
          children: [(0, import_jsx_runtime10.jsx)(Typography_default, {
            variant: "body2",
            fontWeight: "bolder",
            noWrap: true,
            children: (_d = session.user) == null ? void 0 : _d.name
          }), (0, import_jsx_runtime10.jsx)(Typography_default, {
            variant: "caption",
            noWrap: true,
            children: (_e = session.user) == null ? void 0 : _e.email
          })]
        })]
      }), handleClick && ((slots == null ? void 0 : slots.moreIconButton) ? (0, import_jsx_runtime10.jsx)(slots.moreIconButton, {}) : (0, import_jsx_runtime10.jsx)(IconButton_default, {
        size: "small",
        onClick: handleClick,
        ...slotProps == null ? void 0 : slotProps.moreIconButton,
        sx: {
          alignSelf: "center",
          ...(_f = slotProps == null ? void 0 : slotProps.moreIconButton) == null ? void 0 : _f.sx
        },
        children: _MoreVertIcon || (_MoreVertIcon = (0, import_jsx_runtime10.jsx)(MoreVert_default, {
          fontSize: "small"
        }))
      }))]
    });
  }
  return (0, import_jsx_runtime10.jsx)(Tooltip_default, {
    title: session.user.name ?? (accountLocaleText == null ? void 0 : accountLocaleText.accountPreviewTitle),
    children: (slots == null ? void 0 : slots.avatarIconButton) ? (0, import_jsx_runtime10.jsx)(slots.avatarIconButton, {
      ...slotProps == null ? void 0 : slotProps.avatarIconButton
    }) : (0, import_jsx_runtime10.jsx)(Stack_default, {
      sx: {
        py: 0.5,
        ...sx
      },
      children: (0, import_jsx_runtime10.jsx)(IconButton_default, {
        onClick: handleClick,
        "aria-label": localeText == null ? void 0 : localeText.accountPreviewIconButtonLabel,
        size: "small",
        "aria-controls": open ? "account-menu" : void 0,
        "aria-haspopup": "true",
        "aria-expanded": open ? "true" : void 0,
        ...slotProps == null ? void 0 : slotProps.avatarIconButton,
        sx: {
          width: "fit-content",
          margin: "0 auto",
          ...(_g4 = slotProps == null ? void 0 : slotProps.avatarIconButton) == null ? void 0 : _g4.sx
        },
        children: avatarContent
      })
    })
  });
}
true ? AccountPreview.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The handler used when the preview is expanded
   */
  handleClick: import_prop_types5.default.func,
  /**
   * The state of the Account popover
   * @default false
   */
  open: import_prop_types5.default.bool,
  /**
   * The props used for each slot inside.
   */
  slotProps: import_prop_types5.default.shape({
    avatar: import_prop_types5.default.object,
    avatarIconButton: import_prop_types5.default.object,
    moreIconButton: import_prop_types5.default.object
  }),
  /**
   * The components used for each slot inside.
   */
  slots: import_prop_types5.default.shape({
    avatar: import_prop_types5.default.elementType,
    avatarIconButton: import_prop_types5.default.elementType,
    moreIconButton: import_prop_types5.default.elementType
  }),
  /**
   * The prop used to customize the styling of the preview
   */
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
  /**
   * The type of account details to display.
   * @property {'condensed'} condensed - Shows only the user's avatar.
   * @property {'expanded'} expanded - Displays the user's avatar, name, and email if available.
   * @default 'condensed'
   */
  variant: import_prop_types5.default.oneOf(["condensed", "expanded"])
} : void 0;

// node_modules/@toolpad/core/Account/AccountPopoverHeader.js
var React20 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
function AccountPopoverHeader(props) {
  const {
    children,
    ...rest
  } = props;
  return (0, import_jsx_runtime11.jsx)(Stack_default, {
    ...rest,
    children
  });
}
true ? AccountPopoverHeader.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types6.default.node
} : void 0;

// node_modules/@toolpad/core/Account/AccountPopoverFooter.js
var React21 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
function AccountPopoverFooter(props) {
  const {
    children,
    ...rest
  } = props;
  return (0, import_jsx_runtime12.jsx)(Box_default, {
    ...rest,
    sx: {
      display: "flex",
      flexDirection: "row",
      p: 1,
      justifyContent: "flex-end",
      ...rest.sx
    },
    children
  });
}
true ? AccountPopoverFooter.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types7.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object])
} : void 0;

// node_modules/@toolpad/core/Account/Account.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var _AccountPopoverHeader;
var _Divider;
var defaultAccountLocaleText = {
  accountPreviewIconButtonLabel: "Current User",
  accountPreviewTitle: "Account",
  accountSignInLabel: "Sign in",
  accountSignOutLabel: "Sign out"
};
function Account(props) {
  var _a;
  const {
    localeText: propsLocaleText
  } = props;
  const globalLocaleText = useLocaleText();
  const localeText = React22.useMemo(() => ({
    ...defaultAccountLocaleText,
    ...globalLocaleText,
    ...propsLocaleText
  }), [globalLocaleText, propsLocaleText]);
  const {
    slots,
    slotProps
  } = props;
  const [anchorEl, setAnchorEl] = React22.useState(null);
  const session = React22.useContext(SessionContext);
  const authentication = React22.useContext(AuthenticationContext);
  const open = Boolean(anchorEl);
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  if (!authentication) {
    return null;
  }
  let accountContent = null;
  if (!(session == null ? void 0 : session.user)) {
    accountContent = (slots == null ? void 0 : slots.signInButton) ? (0, import_jsx_runtime13.jsx)(slots.signInButton, {
      onClick: authentication.signIn
    }) : (0, import_jsx_runtime13.jsx)(SignInButton, {
      ...slotProps == null ? void 0 : slotProps.signInButton
    });
  } else {
    accountContent = (0, import_jsx_runtime13.jsxs)(React22.Fragment, {
      children: [(slots == null ? void 0 : slots.preview) ? (0, import_jsx_runtime13.jsx)(slots.preview, {
        handleClick,
        open
      }) : (0, import_jsx_runtime13.jsx)(AccountPreview, {
        variant: "condensed",
        handleClick,
        open,
        ...slotProps == null ? void 0 : slotProps.preview
      }), (slots == null ? void 0 : slots.popover) ? (0, import_jsx_runtime13.jsx)(slots.popover, {
        open,
        onClick: handleClick,
        onClose: handleClose,
        ...slotProps == null ? void 0 : slotProps.popover
      }) : (0, import_jsx_runtime13.jsx)(Popover_default, {
        anchorEl,
        id: "account-menu",
        open,
        onClose: handleClose,
        onClick: handleClose,
        transformOrigin: {
          horizontal: "right",
          vertical: "top"
        },
        anchorOrigin: {
          horizontal: "right",
          vertical: "bottom"
        },
        ...slotProps == null ? void 0 : slotProps.popover,
        slotProps: {
          paper: {
            elevation: 0,
            sx: {
              overflow: "visible",
              filter: (theme) => `drop-shadow(0px 2px 8px ${theme.palette.mode === "dark" ? "rgba(255,255,255,0.10)" : "rgba(0,0,0,0.32)"})`,
              mt: 1,
              "&::before": {
                content: '""',
                display: "block",
                position: "absolute",
                top: 0,
                right: 14,
                width: 10,
                height: 10,
                bgcolor: "background.paper",
                transform: "translateY(-50%) rotate(45deg)",
                zIndex: 0
              }
            }
          },
          ...(_a = slotProps == null ? void 0 : slotProps.popover) == null ? void 0 : _a.slotProps
        },
        children: (slots == null ? void 0 : slots.popoverContent) ? (0, import_jsx_runtime13.jsx)(slots.popoverContent, {
          ...slotProps == null ? void 0 : slotProps.popoverContent
        }) : (0, import_jsx_runtime13.jsxs)(Stack_default, {
          direction: "column",
          ...slotProps == null ? void 0 : slotProps.popoverContent,
          children: [_AccountPopoverHeader || (_AccountPopoverHeader = (0, import_jsx_runtime13.jsx)(AccountPopoverHeader, {
            children: (0, import_jsx_runtime13.jsx)(AccountPreview, {
              variant: "expanded"
            })
          })), _Divider || (_Divider = (0, import_jsx_runtime13.jsx)(Divider_default, {})), (0, import_jsx_runtime13.jsx)(AccountPopoverFooter, {
            children: (0, import_jsx_runtime13.jsx)(SignOutButton, {
              ...slotProps == null ? void 0 : slotProps.signOutButton
            })
          })]
        })
      })]
    });
  }
  return (0, import_jsx_runtime13.jsx)(AccountLocaleContext.Provider, {
    value: localeText,
    children: accountContent
  });
}
true ? Account.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The labels for the account component.
   */
  localeText: import_prop_types8.default.object,
  /**
   * The props used for each slot inside.
   */
  slotProps: import_prop_types8.default.shape({
    popover: import_prop_types8.default.object,
    popoverContent: import_prop_types8.default.object,
    preview: import_prop_types8.default.shape({
      handleClick: import_prop_types8.default.func,
      open: import_prop_types8.default.bool,
      slotProps: import_prop_types8.default.shape({
        avatar: import_prop_types8.default.object,
        avatarIconButton: import_prop_types8.default.object,
        moreIconButton: import_prop_types8.default.object
      }),
      slots: import_prop_types8.default.shape({
        avatar: import_prop_types8.default.elementType,
        avatarIconButton: import_prop_types8.default.elementType,
        moreIconButton: import_prop_types8.default.elementType
      }),
      sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
      variant: import_prop_types8.default.oneOf(["condensed", "expanded"])
    }),
    signInButton: import_prop_types8.default.object,
    signOutButton: import_prop_types8.default.object
  }),
  /**
   * The components used for each slot inside.
   */
  slots: import_prop_types8.default.shape({
    popover: import_prop_types8.default.elementType,
    popoverContent: import_prop_types8.default.elementType,
    preview: import_prop_types8.default.elementType,
    signInButton: import_prop_types8.default.elementType,
    signOutButton: import_prop_types8.default.elementType
  })
} : void 0;

// node_modules/@toolpad/core/DashboardLayout/DashboardSidebarSubNavigation.js
var React24 = __toESM(require_react());

// node_modules/@toolpad/core/shared/Link.js
var React23 = __toESM(require_react());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var DefaultLink = React23.forwardRef(function Link(props, ref) {
  const {
    children,
    href,
    onClick,
    history,
    ...rest
  } = props;
  const routerContext = React23.useContext(RouterContext);
  const handleLinkClick = React23.useMemo(() => {
    if (!routerContext) {
      return onClick;
    }
    return (event) => {
      event.preventDefault();
      const url = new URL(event.currentTarget.href);
      routerContext.navigate(url.pathname, {
        history
      });
      onClick == null ? void 0 : onClick(event);
    };
  }, [routerContext, onClick, history]);
  return (0, import_jsx_runtime14.jsx)("a", {
    ref,
    href,
    ...rest,
    onClick: handleLinkClick,
    children
  });
});
var Link2 = React23.forwardRef(function Link3(props, ref) {
  const routerContext = React23.useContext(RouterContext);
  const LinkComponent = (routerContext == null ? void 0 : routerContext.Link) ?? DefaultLink;
  return (0, import_jsx_runtime14.jsx)(LinkComponent, {
    ref,
    ...props,
    children: props.children
  });
});

// node_modules/path-to-regexp/dist.es2015/index.js
function lexer(str) {
  var tokens = [];
  var i = 0;
  while (i < str.length) {
    var char = str[i];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i, value: str[i++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i, value: str[i++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j = i + 1;
      while (j < str.length) {
        var code = str.charCodeAt(j);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i));
      tokens.push({ type: "NAME", index: i, value: name });
      i = j;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j = i + 1;
      if (str[j] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j));
      }
      while (j < str.length) {
        if (str[j] === "\\") {
          pattern += str[j++] + str[j++];
          continue;
        }
        if (str[j] === ")") {
          count--;
          if (count === 0) {
            j++;
            break;
          }
        } else if (str[j] === "(") {
          count++;
          if (str[j + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j));
          }
        }
        pattern += str[j++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i));
      tokens.push({ type: "PATTERN", index: i, value: pattern });
      i = j;
      continue;
    }
    tokens.push({ type: "CHAR", index: i, value: str[i++] });
  }
  tokens.push({ type: "END", index: i, value: "" });
  return tokens;
}
function parse(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a, _b = options.delimiter, delimiter = _b === void 0 ? "/#?" : _b;
  var result = [];
  var key = 0;
  var i = 0;
  var path = "";
  var tryConsume = function(type) {
    if (i < tokens.length && tokens[i].type === type)
      return tokens[i++].value;
  };
  var mustConsume = function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  };
  var consumeText = function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  };
  var isSafe = function(value2) {
    for (var _i = 0, delimiter_1 = delimiter; _i < delimiter_1.length; _i++) {
      var char2 = delimiter_1[_i];
      if (value2.indexOf(char2) > -1)
        return true;
    }
    return false;
  };
  var safePattern = function(prefix2) {
    var prev = result[result.length - 1];
    var prevText = prefix2 || (prev && typeof prev === "string" ? prev : "");
    if (prev && !prevText) {
      throw new TypeError('Must have text between two parameters, missing text after "'.concat(prev.name, '"'));
    }
    if (!prevText || isSafe(prevText))
      return "[^".concat(escapeString(delimiter), "]+?");
    return "(?:(?!".concat(escapeString(prevText), ")[^").concat(escapeString(delimiter), "])+?");
  };
  while (i < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || safePattern(prefix),
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? safePattern(prefix) : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      // Use parenthesized substring match if available, index otherwise
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
function arrayToRegexp(paths, keys, options) {
  var parts = paths.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
}
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse(path, options), keys, options);
}
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode2 = _d === void 0 ? function(x) {
    return x;
  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? "/#?" : _e, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
  var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
  var delimiterRe = "[".concat(escapeString(delimiter), "]");
  var route = start ? "^" : "";
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    if (typeof token === "string") {
      route += escapeString(encode2(token));
    } else {
      var prefix = escapeString(encode2(token.prefix));
      var suffix = escapeString(encode2(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
          } else {
            route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
          }
        } else {
          if (token.modifier === "+" || token.modifier === "*") {
            throw new TypeError('Can not repeat "'.concat(token.name, '" without a prefix and suffix'));
          }
          route += "(".concat(token.pattern, ")").concat(token.modifier);
        }
      } else {
        route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
      }
    }
  }
  if (end) {
    if (!strict)
      route += "".concat(delimiterRe, "?");
    route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
    }
    if (!isEndDelimited) {
      route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
    }
  }
  return new RegExp(route, flags(options));
}
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}

// node_modules/@toolpad/core/shared/navigation.js
var import_invariant4 = __toESM(require_browser());
var getItemKind = (item) => item.kind ?? "page";
var isPageItem = (item) => getItemKind(item) === "page";
var getItemTitle = (item) => {
  return isPageItem(item) ? item.title ?? item.segment ?? "" : item.title;
};
function getPageItemFullPath(basePath, navigationItem) {
  return `${basePath}${basePath && !navigationItem.segment ? "" : "/"}${navigationItem.segment ?? ""}`;
}
function isPageItemSelected(navigationItem, basePath, pathname) {
  return navigationItem.pattern ? pathToRegexp(`${basePath}/${navigationItem.pattern}`).test(pathname) : getPageItemFullPath(basePath, navigationItem) === pathname;
}
function hasSelectedNavigationChildren(navigationItem, basePath, pathname) {
  if (isPageItem(navigationItem) && navigationItem.children) {
    const navigationItemFullPath = getPageItemFullPath(basePath, navigationItem);
    return navigationItem.children.some((nestedNavigationItem) => {
      if (!isPageItem(nestedNavigationItem)) {
        return false;
      }
      if (nestedNavigationItem.children) {
        return hasSelectedNavigationChildren(nestedNavigationItem, navigationItemFullPath, pathname);
      }
      return isPageItemSelected(nestedNavigationItem, navigationItemFullPath, pathname);
    });
  }
  return false;
}

// node_modules/@toolpad/core/DashboardLayout/utils.js
function getDrawerSxTransitionMixin(isExpanded, property) {
  return {
    transition: (theme) => theme.transitions.create(property, {
      easing: theme.transitions.easing.sharp,
      duration: isExpanded ? theme.transitions.duration.enteringScreen : theme.transitions.duration.leavingScreen
    })
  };
}
function getDrawerWidthTransitionMixin(isExpanded) {
  return {
    ...getDrawerSxTransitionMixin(isExpanded, "width"),
    overflowX: "hidden"
  };
}

// node_modules/@toolpad/core/DashboardLayout/DashboardSidebarSubNavigation.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var _ExpandLessIcon;
var _ExpandMoreIcon;
var NavigationListItemButton = styled_default(ListItemButton_default)(({
  theme
}) => ({
  borderRadius: 8,
  "&.Mui-selected": {
    "& .MuiListItemIcon-root": {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    "& .MuiTypography-root": {
      color: (theme.vars ?? theme).palette.text.primary
    },
    "& .MuiSvgIcon-root": {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    "& .MuiAvatar-root": {
      backgroundColor: (theme.vars ?? theme).palette.primary.dark
    },
    "& .MuiTouchRipple-child": {
      backgroundColor: (theme.vars ?? theme).palette.primary.dark
    }
  },
  "& .MuiSvgIcon-root": {
    color: (theme.vars ?? theme).palette.action.active
  },
  "& .MuiAvatar-root": {
    backgroundColor: (theme.vars ?? theme).palette.action.active
  }
}));
function DashboardSidebarSubNavigation({
  subNavigation,
  basePath = "",
  depth = 0,
  onLinkClick,
  isMini = false,
  isFullyExpanded = true,
  hasDrawerTransitions = false,
  selectedItemId
}) {
  const routerContext = React24.useContext(RouterContext);
  const pathname = (routerContext == null ? void 0 : routerContext.pathname) ?? "/";
  const initialExpandedSidebarItemIds = React24.useMemo(() => subNavigation.map((navigationItem, navigationItemIndex) => ({
    navigationItem,
    originalIndex: navigationItemIndex
  })).filter(({
    navigationItem
  }) => hasSelectedNavigationChildren(navigationItem, basePath, pathname)).map(({
    originalIndex
  }) => `${depth}-${originalIndex}`), [basePath, depth, pathname, subNavigation]);
  const [expandedSidebarItemIds, setExpandedSidebarItemIds] = React24.useState(initialExpandedSidebarItemIds);
  const handleOpenFolderClick = React24.useCallback((itemId) => () => {
    setExpandedSidebarItemIds((previousValue) => previousValue.includes(itemId) ? previousValue.filter((previousValueItemId) => previousValueItemId !== itemId) : [...previousValue, itemId]);
  }, []);
  return (0, import_jsx_runtime15.jsx)(List_default, {
    sx: {
      padding: 0,
      mb: depth === 0 ? 4 : 1,
      pl: 2 * depth
    },
    children: subNavigation.map((navigationItem, navigationItemIndex) => {
      if (navigationItem.kind === "header") {
        return (0, import_jsx_runtime15.jsx)(ListSubheader_default, {
          component: "div",
          sx: {
            fontSize: 12,
            fontWeight: "700",
            height: isMini ? 0 : 40,
            ...hasDrawerTransitions ? getDrawerSxTransitionMixin(isFullyExpanded, "height") : {},
            px: 2,
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: "nowrap",
            zIndex: 2
          },
          children: getItemTitle(navigationItem)
        }, `subheader-${depth}-${navigationItemIndex}`);
      }
      if (navigationItem.kind === "divider") {
        const nextItem = subNavigation[navigationItemIndex + 1];
        return (0, import_jsx_runtime15.jsx)(Divider_default, {
          sx: {
            borderBottomWidth: 2,
            mx: 1,
            mt: 1,
            mb: (nextItem == null ? void 0 : nextItem.kind) === "header" && !isMini ? 0 : 1,
            ...hasDrawerTransitions ? getDrawerSxTransitionMixin(isFullyExpanded, "margin") : {}
          }
        }, `divider-${depth}-${navigationItemIndex}`);
      }
      const navigationItemFullPath = getPageItemFullPath(basePath, navigationItem);
      const navigationItemId = `${depth}-${navigationItemIndex}`;
      const navigationItemTitle = getItemTitle(navigationItem);
      const isNestedNavigationExpanded = expandedSidebarItemIds.includes(navigationItemId);
      const nestedNavigationCollapseIcon = isNestedNavigationExpanded ? _ExpandLessIcon || (_ExpandLessIcon = (0, import_jsx_runtime15.jsx)(ExpandLess_default, {})) : _ExpandMoreIcon || (_ExpandMoreIcon = (0, import_jsx_runtime15.jsx)(ExpandMore_default, {}));
      const listItemIconSize = 34;
      const isSelected = isPageItemSelected(navigationItem, basePath, pathname);
      if (isSelected && selectedItemId) {
        console.warn(`Duplicate selected path in navigation: ${navigationItemFullPath}`);
      }
      if (isSelected && !selectedItemId) {
        selectedItemId = navigationItemId;
      }
      const listItem = (0, import_jsx_runtime15.jsx)(ListItem_default, {
        sx: {
          py: 0,
          px: 1,
          overflowX: "hidden"
        },
        children: (0, import_jsx_runtime15.jsxs)(NavigationListItemButton, {
          selected: isSelected && (!navigationItem.children || isMini),
          sx: {
            px: 1.4,
            height: 48
          },
          ...navigationItem.children && !isMini ? {
            onClick: handleOpenFolderClick(navigationItemId)
          } : {
            LinkComponent: Link2,
            href: navigationItemFullPath,
            onClick: onLinkClick
          },
          children: [navigationItem.icon || isMini ? (0, import_jsx_runtime15.jsxs)(ListItemIcon_default, {
            sx: {
              minWidth: listItemIconSize,
              mr: 1.2
            },
            children: [navigationItem.icon ?? null, !navigationItem.icon && isMini ? (0, import_jsx_runtime15.jsx)(Avatar_default, {
              sx: {
                width: listItemIconSize - 7,
                height: listItemIconSize - 7,
                fontSize: 12,
                ml: "-2px"
              },
              children: navigationItemTitle.split(" ").slice(0, 2).map((itemTitleWord) => itemTitleWord.charAt(0).toUpperCase())
            }) : null]
          }) : null, (0, import_jsx_runtime15.jsx)(ListItemText_default, {
            primary: navigationItemTitle,
            sx: {
              whiteSpace: "nowrap",
              zIndex: 1
            }
          }), navigationItem.action && !isMini && isFullyExpanded ? navigationItem.action : null, navigationItem.children && !isMini && isFullyExpanded ? nestedNavigationCollapseIcon : null]
        })
      });
      return (0, import_jsx_runtime15.jsxs)(React24.Fragment, {
        children: [isMini ? (0, import_jsx_runtime15.jsx)(Tooltip_default, {
          title: navigationItemTitle,
          placement: "right",
          children: listItem
        }) : listItem, navigationItem.children && !isMini ? (0, import_jsx_runtime15.jsx)(Collapse_default, {
          in: isNestedNavigationExpanded,
          timeout: "auto",
          unmountOnExit: true,
          children: (0, import_jsx_runtime15.jsx)(DashboardSidebarSubNavigation, {
            subNavigation: navigationItem.children,
            basePath: navigationItemFullPath,
            depth: depth + 1,
            onLinkClick,
            selectedItemId
          })
        }) : null]
      }, navigationItemId);
    })
  });
}

// node_modules/@toolpad/core/DashboardLayout/ToolbarActions.js
var React27 = __toESM(require_react());

// node_modules/@toolpad/core/DashboardLayout/ThemeSwitcher.js
var React26 = __toESM(require_react());

// node_modules/@toolpad/utils/esm/hooks/useSsr.js
var React25 = __toESM(require_react());
function subscribe2() {
  return () => {
  };
}
function getSnapshot2() {
  return false;
}
function getServerSnapshot() {
  return true;
}
function useSsr() {
  return React25.useSyncExternalStore(subscribe2, getSnapshot2, getServerSnapshot);
}

// node_modules/@toolpad/core/DashboardLayout/ThemeSwitcher.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var _DarkModeIcon;
var _LightModeIcon;
function ThemeSwitcher() {
  const isSsr = useSsr();
  const theme = useTheme();
  const {
    paletteMode,
    setPaletteMode,
    isDualTheme
  } = React26.useContext(PaletteModeContext);
  const toggleMode = React26.useCallback(() => {
    setPaletteMode(paletteMode === "dark" ? "light" : "dark");
  }, [paletteMode, setPaletteMode]);
  return isDualTheme ? (0, import_jsx_runtime16.jsx)(Tooltip_default, {
    title: isSsr ? "Switch mode" : `${paletteMode === "dark" ? "Light" : "Dark"} mode`,
    enterDelay: 1e3,
    children: (0, import_jsx_runtime16.jsx)("div", {
      children: (0, import_jsx_runtime16.jsx)(IconButton_default, {
        "aria-label": isSsr ? "Switch theme mode" : `Switch to ${paletteMode === "dark" ? "light" : "dark"} mode`,
        onClick: toggleMode,
        sx: {
          color: (theme.vars ?? theme).palette.primary.dark
        },
        children: theme.getColorSchemeSelector ? (0, import_jsx_runtime16.jsxs)(React26.Fragment, {
          children: [(0, import_jsx_runtime16.jsx)(DarkMode_default, {
            sx: {
              display: "inline",
              [theme.getColorSchemeSelector("dark")]: {
                display: "none"
              }
            }
          }), (0, import_jsx_runtime16.jsx)(LightMode_default, {
            sx: {
              display: "none",
              [theme.getColorSchemeSelector("dark")]: {
                display: "inline"
              }
            }
          })]
        }) : (0, import_jsx_runtime16.jsx)(React26.Fragment, {
          children: isSsr || paletteMode !== "dark" ? _DarkModeIcon || (_DarkModeIcon = (0, import_jsx_runtime16.jsx)(DarkMode_default, {})) : _LightModeIcon || (_LightModeIcon = (0, import_jsx_runtime16.jsx)(LightMode_default, {}))
        })
      })
    })
  }) : null;
}

// node_modules/@toolpad/core/DashboardLayout/ToolbarActions.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var _Stack;
function ToolbarActions() {
  return _Stack || (_Stack = (0, import_jsx_runtime17.jsx)(Stack_default, {
    direction: "row",
    alignItems: "center",
    children: (0, import_jsx_runtime17.jsx)(ThemeSwitcher, {})
  }));
}

// node_modules/@toolpad/core/DashboardLayout/AppTitle.js
var React30 = __toESM(require_react());

// node_modules/@toolpad/core/DashboardLayout/ToolpadLogo.js
var React28 = __toESM(require_react());
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var _g;
var _path;
var _g2;
var _path2;
var _g3;
function ToolpadLogo({
  size = 40
}) {
  return (0, import_jsx_runtime18.jsxs)("svg", {
    width: size,
    height: size,
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: [_g || (_g = (0, import_jsx_runtime18.jsxs)("g", {
      mask: "url(#a)",
      children: [(0, import_jsx_runtime18.jsx)("path", {
        d: "M22.74 27.73v-7.6l6.64-3.79v7.6l-6.64 3.79Z",
        fill: "#007FFF"
      }), (0, import_jsx_runtime18.jsx)("path", {
        d: "M16.1 23.93v-7.59l6.64 3.8v7.59l-6.65-3.8Z",
        fill: "#39F"
      }), (0, import_jsx_runtime18.jsx)("path", {
        d: "m16.1 16.34 6.64-3.8 6.64 3.8-6.64 3.8-6.65-3.8Z",
        fill: "#A5D8FF"
      })]
    })), (0, import_jsx_runtime18.jsx)("mask", {
      id: "b",
      style: {
        maskType: "alpha"
      },
      maskUnits: "userSpaceOnUse",
      x: "8",
      y: "17",
      width: "14",
      height: "15",
      children: _path || (_path = (0, import_jsx_runtime18.jsx)("path", {
        d: "M8.5 22.3c0-1.05.56-2 1.46-2.53l3.75-2.14c.89-.5 1.98-.5 2.87 0l3.75 2.14a2.9 2.9 0 0 1 1.46 2.52v4.23c0 1.04-.56 2-1.46 2.52l-3.75 2.14c-.89.5-1.98.5-2.87 0l-3.75-2.14a2.9 2.9 0 0 1-1.46-2.52v-4.23Z",
        fill: "#D7DCE1"
      }))
    }), _g2 || (_g2 = (0, import_jsx_runtime18.jsxs)("g", {
      mask: "url(#b)",
      children: [(0, import_jsx_runtime18.jsx)("path", {
        d: "M15.14 32v-7.6l6.65-3.8v7.6L15.14 32Z",
        fill: "#007FFF"
      }), (0, import_jsx_runtime18.jsx)("path", {
        d: "M8.5 28.2v-7.6l6.64 3.8V32L8.5 28.2Z",
        fill: "#39F"
      }), (0, import_jsx_runtime18.jsx)("path", {
        d: "m8.5 20.6 6.64-3.79 6.65 3.8-6.65 3.8-6.64-3.8Z",
        fill: "#A5D8FF"
      })]
    })), (0, import_jsx_runtime18.jsx)("mask", {
      id: "c",
      style: {
        maskType: "alpha"
      },
      maskUnits: "userSpaceOnUse",
      x: "8",
      y: "4",
      width: "22",
      height: "20",
      children: _path2 || (_path2 = (0, import_jsx_runtime18.jsx)("path", {
        d: "M24.17 4.82a2.9 2.9 0 0 0-2.87 0L9.97 11.22a2.9 2.9 0 0 0-1.47 2.53v4.22c0 1.04.56 2 1.46 2.52l3.75 2.14c.89.5 1.98.5 2.87 0l11.33-6.42a2.9 2.9 0 0 0 1.47-2.52V9.48c0-1.04-.56-2-1.46-2.52l-3.75-2.14Z",
        fill: "#D7DCE1"
      }))
    }), _g3 || (_g3 = (0, import_jsx_runtime18.jsxs)("g", {
      mask: "url(#c)",
      children: [(0, import_jsx_runtime18.jsx)("path", {
        d: "M15.14 23.46v-7.6L29.38 7.8v7.59l-14.24 8.07Z",
        fill: "#007FFF"
      }), (0, import_jsx_runtime18.jsx)("path", {
        d: "M8.5 19.66v-7.6l6.64 3.8v7.6l-6.64-3.8Z",
        fill: "#39F"
      }), (0, import_jsx_runtime18.jsx)("path", {
        d: "M8.5 12.07 22.74 4l6.64 3.8-14.24 8.06-6.64-3.8Z",
        fill: "#A5D8FF"
      })]
    }))]
  });
}

// node_modules/@toolpad/core/shared/branding.js
var React29 = __toESM(require_react());
function useApplicationTitle() {
  const branding = React29.useContext(BrandingContext);
  return (branding == null ? void 0 : branding.title) ?? "Toolpad";
}

// node_modules/@toolpad/core/DashboardLayout/AppTitle.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var _ToolpadLogo;
var LogoContainer = styled_default("div")({
  position: "relative",
  height: 40,
  "& img": {
    maxHeight: 40
  }
});
function AppTitle(props) {
  var _a, _b, _c;
  const theme = useTheme();
  const defaultTitle = useApplicationTitle();
  const title = ((_a = props == null ? void 0 : props.branding) == null ? void 0 : _a.title) ?? defaultTitle;
  return (0, import_jsx_runtime19.jsx)(Link2, {
    href: ((_b = props == null ? void 0 : props.branding) == null ? void 0 : _b.homeUrl) ?? "/",
    style: {
      textDecoration: "none"
    },
    children: (0, import_jsx_runtime19.jsxs)(Stack_default, {
      direction: "row",
      alignItems: "center",
      children: [(0, import_jsx_runtime19.jsx)(LogoContainer, {
        children: ((_c = props == null ? void 0 : props.branding) == null ? void 0 : _c.logo) ?? (_ToolpadLogo || (_ToolpadLogo = (0, import_jsx_runtime19.jsx)(ToolpadLogo, {
          size: 40
        })))
      }), (0, import_jsx_runtime19.jsx)(Typography_default, {
        variant: "h6",
        sx: {
          color: (theme.vars ?? theme).palette.primary.main,
          fontWeight: "700",
          ml: 1,
          whiteSpace: "nowrap",
          lineHeight: 1
        },
        children: title
      })]
    })
  });
}

// node_modules/@toolpad/core/DashboardLayout/DashboardLayout.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var _MenuOpenIcon;
var _MenuIcon;
var _Toolbar;
var AppBar = styled_default(AppBar_default)(({
  theme
}) => ({
  borderWidth: 0,
  borderBottomWidth: 1,
  borderStyle: "solid",
  borderColor: (theme.vars ?? theme).palette.divider,
  boxShadow: "none",
  zIndex: theme.zIndex.drawer + 1
}));
function DashboardLayout(props) {
  const {
    children,
    branding: brandingProp,
    navigation: navigationProp,
    disableCollapsibleSidebar = false,
    defaultSidebarCollapsed = false,
    hideNavigation = false,
    sidebarExpandedWidth = 320,
    slots,
    slotProps,
    sx
  } = props;
  const theme = useTheme();
  const brandingContext = React31.useContext(BrandingContext);
  const navigationContext = React31.useContext(NavigationContext);
  const appWindowContext = React31.useContext(WindowContext);
  const branding = {
    ...brandingContext,
    ...brandingProp
  };
  const navigation = navigationProp ?? navigationContext;
  const [isDesktopNavigationExpanded, setIsDesktopNavigationExpanded] = React31.useState(!defaultSidebarCollapsed);
  const [isMobileNavigationExpanded, setIsMobileNavigationExpanded] = React31.useState(false);
  const isOverSmViewport = useMediaQuery_default(theme.breakpoints.up("sm"), appWindowContext && {
    matchMedia: appWindowContext.matchMedia
  });
  const isOverMdViewport = useMediaQuery_default(theme.breakpoints.up("md"), appWindowContext && {
    matchMedia: appWindowContext.matchMedia
  });
  const isNavigationExpanded = isOverMdViewport ? isDesktopNavigationExpanded : isMobileNavigationExpanded;
  const setIsNavigationExpanded = React31.useCallback((newExpanded) => {
    if (isOverMdViewport) {
      setIsDesktopNavigationExpanded(newExpanded);
    } else {
      setIsMobileNavigationExpanded(newExpanded);
    }
  }, [isOverMdViewport]);
  const [isNavigationFullyExpanded, setIsNavigationFullyExpanded] = React31.useState(isNavigationExpanded);
  React31.useEffect(() => {
    if (isNavigationExpanded) {
      const drawerWidthTransitionTimeout = setTimeout(() => {
        setIsNavigationFullyExpanded(true);
      }, theme.transitions.duration.enteringScreen);
      return () => clearTimeout(drawerWidthTransitionTimeout);
    }
    setIsNavigationFullyExpanded(false);
    return () => {
    };
  }, [isNavigationExpanded, theme]);
  const selectedItemIdRef = React31.useRef("");
  const handleSetNavigationExpanded = React31.useCallback((newExpanded) => () => {
    setIsNavigationExpanded(newExpanded);
  }, [setIsNavigationExpanded]);
  const toggleNavigationExpanded = React31.useCallback(() => {
    setIsNavigationExpanded(!isNavigationExpanded);
  }, [isNavigationExpanded, setIsNavigationExpanded]);
  const handleNavigationLinkClick = React31.useCallback(() => {
    selectedItemIdRef.current = "";
    setIsMobileNavigationExpanded(false);
  }, [setIsMobileNavigationExpanded]);
  React31.useMemo(() => {
    if (navigation) {
      selectedItemIdRef.current = "";
    }
  }, [navigation]);
  const isDesktopMini = !disableCollapsibleSidebar && !isDesktopNavigationExpanded;
  const isMobileMini = !disableCollapsibleSidebar && !isMobileNavigationExpanded;
  const getMenuIcon = React31.useCallback((isExpanded) => {
    const expandMenuActionText = "Expand";
    const collapseMenuActionText = "Collapse";
    return (0, import_jsx_runtime20.jsx)(Tooltip_default, {
      title: `${isExpanded ? collapseMenuActionText : expandMenuActionText} menu`,
      enterDelay: 1e3,
      children: (0, import_jsx_runtime20.jsx)("div", {
        children: (0, import_jsx_runtime20.jsx)(IconButton_default, {
          "aria-label": `${isExpanded ? collapseMenuActionText : expandMenuActionText} navigation menu`,
          onClick: toggleNavigationExpanded,
          children: isExpanded ? _MenuOpenIcon || (_MenuOpenIcon = (0, import_jsx_runtime20.jsx)(MenuOpen_default, {})) : _MenuIcon || (_MenuIcon = (0, import_jsx_runtime20.jsx)(Menu_default, {}))
        })
      })
    });
  }, [toggleNavigationExpanded]);
  const hasDrawerTransitions = isOverSmViewport && (!disableCollapsibleSidebar || isOverMdViewport);
  const ToolbarActionsSlot = (slots == null ? void 0 : slots.toolbarActions) ?? ToolbarActions;
  const ToolbarAccountSlot = (slots == null ? void 0 : slots.toolbarAccount) ?? Account;
  const SidebarFooterSlot = (slots == null ? void 0 : slots.sidebarFooter) ?? null;
  const getDrawerContent = React31.useCallback((isMini, viewport) => {
    var _a;
    return (0, import_jsx_runtime20.jsxs)(React31.Fragment, {
      children: [_Toolbar || (_Toolbar = (0, import_jsx_runtime20.jsx)(Toolbar_default, {})), (0, import_jsx_runtime20.jsxs)(Box_default, {
        component: "nav",
        "aria-label": `${viewport.charAt(0).toUpperCase()}${viewport.slice(1)}`,
        sx: {
          height: "100%",
          display: "flex",
          flexDirection: "column",
          justifyContent: "space-between",
          overflow: "auto",
          pt: ((_a = navigation[0]) == null ? void 0 : _a.kind) === "header" && !isMini ? 0 : 2,
          ...hasDrawerTransitions ? getDrawerSxTransitionMixin(isNavigationFullyExpanded, "padding") : {}
        },
        children: [(0, import_jsx_runtime20.jsx)(DashboardSidebarSubNavigation, {
          subNavigation: navigation,
          onLinkClick: handleNavigationLinkClick,
          isMini,
          isFullyExpanded: isNavigationFullyExpanded,
          hasDrawerTransitions,
          selectedItemId: selectedItemIdRef.current
        }), SidebarFooterSlot ? (0, import_jsx_runtime20.jsx)(SidebarFooterSlot, {
          mini: isMini,
          ...slotProps == null ? void 0 : slotProps.sidebarFooter
        }) : null]
      })]
    });
  }, [SidebarFooterSlot, handleNavigationLinkClick, hasDrawerTransitions, isNavigationFullyExpanded, navigation, slotProps == null ? void 0 : slotProps.sidebarFooter]);
  const getDrawerSharedSx = React31.useCallback((isMini, isTemporary) => {
    const drawerWidth = isMini ? 64 : sidebarExpandedWidth;
    return {
      displayPrint: "none",
      width: drawerWidth,
      flexShrink: 0,
      ...getDrawerWidthTransitionMixin(isNavigationExpanded),
      ...isTemporary ? {
        position: "absolute"
      } : {},
      [`& .MuiDrawer-paper`]: {
        position: "absolute",
        width: drawerWidth,
        boxSizing: "border-box",
        backgroundImage: "none",
        ...getDrawerWidthTransitionMixin(isNavigationExpanded)
      }
    };
  }, [isNavigationExpanded, sidebarExpandedWidth]);
  const layoutRef = React31.useRef(null);
  return (0, import_jsx_runtime20.jsxs)(Box_default, {
    ref: layoutRef,
    sx: {
      position: "relative",
      display: "flex",
      overflow: "hidden",
      height: "100vh",
      width: "100vw",
      ...sx
    },
    children: [(0, import_jsx_runtime20.jsx)(AppBar, {
      color: "inherit",
      position: "absolute",
      sx: {
        displayPrint: "none"
      },
      children: (0, import_jsx_runtime20.jsx)(Toolbar_default, {
        sx: {
          backgroundColor: "inherit",
          mx: {
            xs: -0.75,
            sm: -1.5
          }
        },
        children: (0, import_jsx_runtime20.jsxs)(Stack_default, {
          direction: "row",
          justifyContent: "space-between",
          alignItems: "center",
          sx: {
            flexWrap: "wrap",
            width: "100%"
          },
          children: [(0, import_jsx_runtime20.jsxs)(Stack_default, {
            direction: "row",
            children: [!hideNavigation ? (0, import_jsx_runtime20.jsxs)(React31.Fragment, {
              children: [(0, import_jsx_runtime20.jsx)(Box_default, {
                sx: {
                  mr: {
                    sm: disableCollapsibleSidebar ? 0 : 1
                  },
                  display: {
                    md: "none"
                  }
                },
                children: getMenuIcon(isMobileNavigationExpanded)
              }), (0, import_jsx_runtime20.jsx)(Box_default, {
                sx: {
                  display: {
                    xs: "none",
                    md: disableCollapsibleSidebar ? "none" : "block"
                  },
                  mr: disableCollapsibleSidebar ? 0 : 1
                },
                children: getMenuIcon(isDesktopNavigationExpanded)
              })]
            }) : null, (slots == null ? void 0 : slots.appTitle) ? (0, import_jsx_runtime20.jsx)(slots.appTitle, {
              ...slotProps == null ? void 0 : slotProps.appTitle
            }) : (
              /* Hierarchy of application of `branding`
               * 1. Branding prop passed in the `slotProps.appTitle`
               * 2. Branding prop passed to the `DashboardLayout`
               * 3. Branding prop passed to the `AppProvider`
               */
              (0, import_jsx_runtime20.jsx)(AppTitle, {
                branding,
                ...slotProps == null ? void 0 : slotProps.appTitle
              })
            )]
          }), (0, import_jsx_runtime20.jsxs)(Stack_default, {
            direction: "row",
            alignItems: "center",
            spacing: 1,
            sx: {
              marginLeft: "auto"
            },
            children: [(0, import_jsx_runtime20.jsx)(ToolbarActionsSlot, {
              ...slotProps == null ? void 0 : slotProps.toolbarActions
            }), (0, import_jsx_runtime20.jsx)(ToolbarAccountSlot, {
              ...slotProps == null ? void 0 : slotProps.toolbarAccount
            })]
          })]
        })
      })
    }), !hideNavigation ? (0, import_jsx_runtime20.jsxs)(React31.Fragment, {
      children: [(0, import_jsx_runtime20.jsx)(Drawer_default, {
        container: layoutRef.current,
        variant: "temporary",
        open: isMobileNavigationExpanded,
        onClose: handleSetNavigationExpanded(false),
        ModalProps: {
          keepMounted: true
          // Better open performance on mobile.
        },
        sx: {
          display: {
            xs: "block",
            sm: disableCollapsibleSidebar ? "block" : "none",
            md: "none"
          },
          ...getDrawerSharedSx(false, true)
        },
        children: getDrawerContent(false, "phone")
      }), (0, import_jsx_runtime20.jsx)(Drawer_default, {
        variant: "permanent",
        sx: {
          display: {
            xs: "none",
            sm: disableCollapsibleSidebar ? "none" : "block",
            md: "none"
          },
          ...getDrawerSharedSx(isMobileMini, false)
        },
        children: getDrawerContent(isMobileMini, "tablet")
      }), (0, import_jsx_runtime20.jsx)(Drawer_default, {
        variant: "permanent",
        sx: {
          display: {
            xs: "none",
            md: "block"
          },
          ...getDrawerSharedSx(isDesktopMini, false)
        },
        children: getDrawerContent(isDesktopMini, "desktop")
      })]
    }) : null, (0, import_jsx_runtime20.jsxs)(Box_default, {
      sx: {
        display: "flex",
        flexDirection: "column",
        flex: 1,
        minWidth: 0
      },
      children: [(0, import_jsx_runtime20.jsx)(Toolbar_default, {
        sx: {
          displayPrint: "none"
        }
      }), (0, import_jsx_runtime20.jsx)(Box_default, {
        component: "main",
        sx: {
          display: "flex",
          flexDirection: "column",
          flex: 1,
          overflow: "auto"
        },
        children
      })]
    })]
  });
}
true ? DashboardLayout.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Branding options for the dashboard.
   * @default null
   */
  branding: import_prop_types9.default.shape({
    homeUrl: import_prop_types9.default.string,
    logo: import_prop_types9.default.node,
    title: import_prop_types9.default.string
  }),
  /**
   * The content of the dashboard.
   */
  children: import_prop_types9.default.node,
  /**
   * Whether the sidebar should start collapsed in desktop size screens.
   * @default false
   */
  defaultSidebarCollapsed: import_prop_types9.default.bool,
  /**
   * Whether the sidebar should not be collapsible to a mini variant in desktop and tablet viewports.
   * @default false
   */
  disableCollapsibleSidebar: import_prop_types9.default.bool,
  /**
   * Whether the navigation bar and menu icon should be hidden
   * @default false
   */
  hideNavigation: import_prop_types9.default.bool,
  /**
   * Navigation definition for the dashboard. [Find out more](https://mui.com/toolpad/core/react-dashboard-layout/#navigation).
   * @default []
   */
  navigation: import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.shape({
    action: import_prop_types9.default.node,
    children: import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.object, import_prop_types9.default.shape({
      kind: import_prop_types9.default.oneOf(["header"]).isRequired,
      title: import_prop_types9.default.string.isRequired
    }), import_prop_types9.default.shape({
      kind: import_prop_types9.default.oneOf(["divider"]).isRequired
    })]).isRequired),
    icon: import_prop_types9.default.node,
    kind: import_prop_types9.default.oneOf(["page"]),
    pattern: import_prop_types9.default.string,
    segment: import_prop_types9.default.string,
    title: import_prop_types9.default.string
  }), import_prop_types9.default.shape({
    kind: import_prop_types9.default.oneOf(["header"]).isRequired,
    title: import_prop_types9.default.string.isRequired
  }), import_prop_types9.default.shape({
    kind: import_prop_types9.default.oneOf(["divider"]).isRequired
  })]).isRequired),
  /**
   * Width of the sidebar when expanded.
   * @default 320
   */
  sidebarExpandedWidth: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types9.default.shape({
    appTitle: import_prop_types9.default.shape({
      branding: import_prop_types9.default.shape({
        homeUrl: import_prop_types9.default.string,
        logo: import_prop_types9.default.node,
        title: import_prop_types9.default.string
      })
    }),
    sidebarFooter: import_prop_types9.default.shape({
      mini: import_prop_types9.default.bool.isRequired
    }),
    toolbarAccount: import_prop_types9.default.shape({
      localeText: import_prop_types9.default.object,
      slotProps: import_prop_types9.default.shape({
        popover: import_prop_types9.default.object,
        popoverContent: import_prop_types9.default.object,
        preview: import_prop_types9.default.object,
        signInButton: import_prop_types9.default.object,
        signOutButton: import_prop_types9.default.object
      }),
      slots: import_prop_types9.default.shape({
        popover: import_prop_types9.default.elementType,
        popoverContent: import_prop_types9.default.elementType,
        preview: import_prop_types9.default.elementType,
        signInButton: import_prop_types9.default.elementType,
        signOutButton: import_prop_types9.default.elementType
      })
    }),
    toolbarActions: import_prop_types9.default.object
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types9.default.shape({
    appTitle: import_prop_types9.default.elementType,
    sidebarFooter: import_prop_types9.default.elementType,
    toolbarAccount: import_prop_types9.default.elementType,
    toolbarActions: import_prop_types9.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object])
} : void 0;
export {
  DashboardLayout,
  ThemeSwitcher,
  ToolbarActions
};
//# sourceMappingURL=@toolpad_core_DashboardLayout.js.map
