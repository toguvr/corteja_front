"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCachedDataSource = useCachedDataSource;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useCachedDataSource(dataSource, cache) {
  return React.useMemo(() => {
    if (!cache) {
      return dataSource;
    }
    const {
      getMany,
      getOne,
      createOne,
      updateOne,
      deleteOne,
      ...rest
    } = dataSource;
    return {
      ...Object.fromEntries(Object.entries({
        getMany,
        getOne
      }).filter(([_key, method]) => !!method).map(([key, method]) => [key, async (...args) => {
        const cacheKey = JSON.stringify([key, ...args]);
        const cacheValue = cache.get(cacheKey);
        if (cacheValue) {
          return cacheValue;
        }
        const result = await method(...args);
        cache.set(cacheKey, result);
        return result;
      }])),
      ...Object.fromEntries(Object.entries({
        createOne,
        updateOne,
        deleteOne
      }).filter(([_key, method]) => !!method).map(([key, method]) => [key, async (...args) => {
        const result = await method(...args);
        cache.clear();
        return result;
      }])),
      ...rest
    };
  }, [cache, dataSource]);
}